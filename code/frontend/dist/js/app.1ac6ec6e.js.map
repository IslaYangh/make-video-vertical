{"version":3,"file":"js/app.1ac6ec6e.js","mappings":"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","sources":["webpack://frontend/./src/App.vue","webpack://frontend/./src/App.vue?7ccd","webpack://frontend/./src/router/index.js","webpack://frontend/./src/main.js","webpack://frontend/./src/map/index.js","webpack://frontend/./src/store/index.js","webpack://frontend/./src/utils/user.js","webpack://frontend/./src/api/index.js","webpack://frontend/./src/viewmodels/VideoEditor.js","webpack://frontend/./src/viewmodels/TimeLine.js","webpack://frontend/./src/viewmodels/ReadFrame.js","webpack://frontend/./src/wasm/index.js","webpack://frontend/webpack/bootstrap","webpack://frontend/webpack/runtime/chunk loaded","webpack://frontend/webpack/runtime/compat get default export","webpack://frontend/webpack/runtime/define property getters","webpack://frontend/webpack/runtime/ensure chunk","webpack://frontend/webpack/runtime/get javascript chunk filename","webpack://frontend/webpack/runtime/get mini-css chunk filename","webpack://frontend/webpack/runtime/global","webpack://frontend/webpack/runtime/hasOwnProperty shorthand","webpack://frontend/webpack/runtime/load script","webpack://frontend/webpack/runtime/make namespace object","webpack://frontend/webpack/runtime/node module decorator","webpack://frontend/webpack/runtime/publicPath","webpack://frontend/webpack/runtime/css loading","webpack://frontend/webpack/runtime/jsonp chunk loading","webpack://frontend/webpack/startup"],"sourcesContent":["<template>\n  <!-- <video-editor></video-editor> -->\n  <el-config-provider :locale=\"locale\">\n    <router-view />\n  </el-config-provider>\n</template>\n\n<script setup>\nimport Store from '@/store'\n// 引入element-plus中文语言包\nimport locale from 'element-plus/es/locale/lang/zh-cn'\n\n// 依赖注入\nStore.useProvider()\n</script>\n\n<style lang=\"scss\">\n@use './assets/css/reset.css';\n@use './assets/css/iconfont.css';\n\n#app {\n  width: 100vw;\n  height: 100vh;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  background: #1a1a1a;\n}\n</style>\n","import script from \"./App.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./App.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=2884acc9&lang=scss\"\n\nconst __exports__ = script;\n\nexport default __exports__","import { createRouter, createWebHashHistory } from 'vue-router'\nimport { getUser } from '@/utils/user'\n\nconst routes = [\n  {\n    path: '/',\n    name: 'Layout',\n    // 重定向\n    redirect: '/video',\n    component: () => import('@/layout/index.vue'),\n    children: [\n      {\n        path: '/video',\n        name: 'Video',\n        component: () => import('@/views/video/index.vue')\n      },\n      {\n        path: '/file',\n        name: 'File',\n        component: () => import('@/views/file/index.vue')\n      },\n      {\n        path: '/user',\n        name: 'User',\n        component: () => import('@/views/user/index.vue')\n      }\n    ]\n  },\n  {\n    path: '/login',\n    name: 'Login',\n    component: () => import('@/views/login.vue')\n  }\n]\n\nconst router = createRouter({\n  history: createWebHashHistory(),\n  routes\n})\n\n// 路由导航守卫\nrouter.beforeEach((to, from) => {\n  // 判断是否是登陆页面\n  if (to.path === '/login') {\n    return\n  } else {\n    const user = getUser()\n    // 如果没有登陆，跳转到登陆页面\n    if (user) {\n      if (to.path === '/user') {\n        if (user.isAdmin) return\n        else router.push('/')\n      }\n      return\n    } else {\n      router.push('/login')\n    }\n  }\n})\n\nexport default router\n","import { createApp } from 'vue'\nimport App from './App.vue'\nimport router from './router'\n\nimport ElementPlus from 'element-plus'\nimport 'element-plus/dist/index.css'\nimport 'element-plus/theme-chalk/dark/css-vars.css'\n\ncreateApp(App).use(ElementPlus).use(router).mount('#app')\n","import _ from \"lodash\";\n\n/**\n * 计算时间轴包裹器宽度\n * @param {number} clientWidth 请传入 document.body.clientWidth\n * @returns 时间轴的宽度\n */\nconst calcTimeLineContainerWidth = clientWidth => {\n  // 常量：除了时间轴外其他组件的宽度\n  const OTHER_WIDTH = 783;\n  return clientWidth - OTHER_WIDTH;\n};\n\n/**\n * 将帧数转换为时间\n * @param {number} frame 当前要转换的帧数\n * @param {number} fps 帧率\n * @returns 格式化的时间\n */\nconst frame2Time = (frame, fps) =>\n  frame % fps === 0 ? second2hms(frame / fps) : (frame % fps) + \"f\";\n\nconst second2hms = second => {\n  const h =\n    Math.floor(second / 3600) >= 10\n      ? String(Math.floor(second / 3600))\n      : \"0\" + Math.floor(second / 3600);\n  const m =\n    Math.floor((second / 60) % 60) >= 10\n      ? String(Math.floor((second / 60) % 60))\n      : \"0\" + Math.floor((second / 60) % 60);\n  const s =\n    Math.floor(second % 60) >= 10\n      ? String(Math.floor(second % 60))\n      : \"0\" + Math.floor(second % 60);\n\n  return h === \"00\" ? m + \":\" + s : h + \":\" + m + \":\" + s;\n};\n\n/**\n * 格子渲染器需要把帧，渲染为格子：\n * @param {number} frameWidth 帧宽度\n * @returns {Object}\n *  result.gridWidth 格子宽度\n *  result.gridFrame 格子所包含的帧数\n *  result.groupGridFrame 格子组所包含的帧数\n */\nconst frameWidth2Grid = frameWidth => {\n  // 常量，用于表明渲染分段函数\n  const gridSegmentList = [\n    // level1\n    {\n      maxWidth: 200,\n      minWidth: 43,\n      gridFrame: 1,\n      groupGridFrame: 2\n    },\n    // level2\n    {\n      maxWidth: 43,\n      minWidth: 33,\n      gridFrame: 1,\n      groupGridFrame: 3\n    },\n    // level3\n    {\n      maxWidth: 33,\n      minWidth: 27,\n      gridFrame: 1,\n      groupGridFrame: 5\n    },\n    // level4\n    {\n      maxWidth: 27,\n      minWidth: 20,\n      gridFrame: 1,\n      groupGridFrame: 10\n    },\n    // level5\n    {\n      maxWidth: 20,\n      minWidth: 10,\n      gridFrame: 3,\n      groupGridFrame: 15\n    },\n    // level6\n    {\n      maxWidth: 10,\n      minWidth: 5,\n      gridFrame: 3,\n      groupGridFrame: 30\n    },\n    // level7\n    {\n      maxWidth: 5,\n      minWidth: 30 / 9,\n      gridFrame: 6,\n      groupGridFrame: 60\n    },\n    // level8\n    {\n      maxWidth: 30 / 9,\n      minWidth: 2,\n      gridFrame: 9,\n      groupGridFrame: 90\n    },\n    // level9\n    {\n      maxWidth: 2,\n      minWidth: 1,\n      gridFrame: 15,\n      groupGridFrame: 150\n    },\n    // level10\n    {\n      maxWidth: 1,\n      minWidth: 30 / 90,\n      gridFrame: 30,\n      groupGridFrame: 300\n    },\n    // level11\n    {\n      maxWidth: 30 / 90,\n      minWidth: 30 / 180,\n      gridFrame: 90,\n      groupGridFrame: 900\n    },\n    // level12\n    {\n      maxWidth: 30 / 180,\n      minWidth: 30 / 360,\n      gridFrame: 180,\n      groupGridFrame: 1800\n    },\n    // level13\n    {\n      maxWidth: 30 / 360,\n      minWidth: 30 / 540,\n      gridFrame: 360,\n      groupGridFrame: 3600\n    },\n    // level14\n    {\n      maxWidth: 30 / 540,\n      minWidth: 30 / 900,\n      gridFrame: 540,\n      groupGridFrame: 5400\n    },\n    // level15\n    {\n      maxWidth: 30 / 900,\n      minWidth: 30 / 1800,\n      gridFrame: 900,\n      groupGridFrame: 9000\n    },\n    // level16\n    {\n      maxWidth: 30 / 1800,\n      minWidth: 30 / 5400,\n      gridFrame: 1800,\n      groupGridFrame: 18000\n    },\n    // level17\n    {\n      maxWidth: 30 / 5400,\n      minWidth: 30 / 21600,\n      gridFrame: 5400,\n      groupGridFrame: 54000\n    },\n    // level18\n    {\n      maxWidth: 30 / 21600,\n      minWidth: 30 / 32400,\n      gridFrame: 21600,\n      groupGridFrame: 216000\n    },\n    // level19\n    {\n      maxWidth: 30 / 32400,\n      minWidth: 30 / 54000,\n      gridFrame: 32400,\n      groupGridFrame: 324000\n    },\n    // level20\n    {\n      maxWidth: 30 / 54000,\n      minWidth: 30 / 108000,\n      gridFrame: 54000,\n      groupGridFrame: 540000\n    },\n    // level21\n    {\n      maxWidth: 30 / 108000,\n      minWidth: 30 / 324000,\n      gridFrame: 108000,\n      groupGridFrame: 1080000\n    },\n    // level22\n    {\n      maxWidth: 30 / 324000,\n      minWidth: 30 / 32400000000000000000,\n      gridFrame: 324000,\n      groupGridFrame: 3240000\n    }\n  ];\n\n  // 临时变量，用于存储函数结果\n  let tempGridSegment;\n\n  // 遍历常量，查找 frameWidth 所在的分段函数\n  for (const gridSegment of gridSegmentList) {\n    if (\n      frameWidth <= gridSegment.maxWidth &&\n      frameWidth > gridSegment.minWidth\n    ) {\n      tempGridSegment = gridSegment;\n      break;\n    }\n  }\n\n  if (!tempGridSegment) {\n    throw new Error(\"Please input frameWidth in [0,200]\");\n  }\n\n  return {\n    gridWidth: tempGridSegment.gridFrame * frameWidth,\n    gridFrame: tempGridSegment.gridFrame,\n    groupGridFrame: tempGridSegment.groupGridFrame\n  };\n};\n\n/**\n * 时间轴总格数\n * input @帧宽度 frameWidth\n * input @时间轴宽度 timeLineWidth\n * input @素材最大时刻 materialMaxFrame\n * output @时间轴格子数量 girdTotalNumber\n */\nconst getGridTotalNumber = (frameWidth, timeLineWidth, materialMaxFrame) => {\n  // 格宽度\n  const gridWidth = frameWidth2Grid(frameWidth).gridWidth;\n\n  // 计算一屏幕有多少格\n  const oneScreenGridNumber = Math.floor(timeLineWidth / gridWidth);\n\n  // 计算空白处有多少格\n  const emptyScreenGridNumber = Math.floor(oneScreenGridNumber / 3);\n\n  // 计算素材有多少格\n  const materialGridNumber = (materialMaxFrame, frameWidth, gridWidth) => {\n    // 素材宽度\n    const materialWidth = materialMaxFrame * frameWidth;\n    // 素材格数（向上取整）\n    const materialGridNumber = Math.ceil(materialWidth / gridWidth);\n    return materialGridNumber;\n  };\n\n  // 总格数\n  const gridTotalNumber =\n    emptyScreenGridNumber +\n    materialGridNumber(materialMaxFrame, frameWidth, gridWidth);\n\n  return gridTotalNumber;\n};\n\n/**\n * 时间刻度总宽度\n * input @帧宽度 frameWidth\n * input @时间轴宽度 timeLineWidth\n * input @素材最大时刻 materialMaxFrame\n * output @时间轴格子数量 girdTotalNumber\n */\nconst getTimeScaleWidth = (frameWidth, timeLineWidth, materialMaxFrame) => {\n  // 格宽度\n  const gridWidth = frameWidth2Grid(frameWidth).gridWidth;\n\n  // 总格数\n  const gridTotalNumber = getGridTotalNumber(\n    frameWidth,\n    timeLineWidth,\n    materialMaxFrame\n  );\n\n  const result = gridTotalNumber * gridWidth;\n  return timeLineWidth >= result ? timeLineWidth : result;\n};\n\nconst getTimeScalePlaceHolderWidth = (offsetLeft, gridWidth) =>\n  Math.floor(offsetLeft / gridWidth) * gridWidth;\n\n// 当前绘制的是第几个格子\nconst gridBufferFirstIndex = (offsetLeft, gridWidth) => {\n  const placeholderWidth = Math.floor(offsetLeft / gridWidth) * gridWidth;\n  return Math.floor(placeholderWidth / gridWidth) + 1;\n};\n\n// 格子缓存数量\nconst getGridBufferNumber = (timeLine_width, gridWidth) =>\n  Math.ceil(timeLine_width / gridWidth) + 1;\n\n/**\n * 渲染格子\n * @param {ref<List>} gridBufferList 最终要渲染的 GridBufferList\n * @param {*} gridWidth 每个格子的宽度\n * @param {number} groupGridFrame 每个 GridGroup 里包含多少 Frame\n * @param {number} gridFrame 每个 Grid 里包含多少 Frame\n * @param {width} timeLineOffsetLeft 时间轴的左偏移量\n * @param {*} timescale_width 时间轴的实际宽度（不是显示宽度）\n */\nconst renderGridBufferList = (\n  gridBufferList,\n  gridWidth,\n  groupGridFrame,\n  gridFrame,\n  timeLineOffsetLeft,\n  timeLine_width\n) => {\n  try {\n    // 获取格子倍数；例如：2 倍，就是 2 的倍数都会绘制大格\n    const gridMultiple = groupGridFrame / gridFrame;\n\n    // 初始位置\n    const firstIndex = gridBufferFirstIndex(timeLineOffsetLeft, gridWidth);\n\n    // 结束位置\n    const gridBufferNumber = getGridBufferNumber(timeLine_width, gridWidth);\n\n    // 动态计算数组长度\n    if (gridBufferNumber > gridBufferList.value.length) {\n      const dValue = gridBufferNumber - gridBufferList.value.length;\n      for (let i = 1; i <= dValue; i++) {\n        gridBufferList.value.push({\n          frame: 0,\n          showNumber: false,\n          width: 0\n        });\n      }\n    } else if (gridBufferNumber < gridBufferList.value.length) {\n      const dValue = gridBufferList.value.length - gridBufferNumber;\n      gridBufferList.value.splice(gridBufferList.value.length - dValue, dValue);\n    } else {\n      // doing nothing\n    }\n\n    // 渲染过程\n    for (let i = firstIndex; i <= gridBufferNumber + firstIndex - 1; i++) {\n      const grid = gridBufferList.value[i - firstIndex];\n      if (i - 1 === 0) {\n        grid.frame = 0;\n        grid.showNumber = true;\n        grid.width = gridWidth;\n      } else if ((i - 1) % gridMultiple === 0) {\n        grid.frame = (i - 1) * gridFrame;\n        grid.showNumber = true;\n        grid.width = gridWidth;\n      } else {\n        grid.frame = (i - 1) * gridFrame;\n        grid.showNumber = false;\n        grid.width = gridWidth;\n      }\n    }\n  } catch (error) {\n    // doing nothing\n    // console.log(error);\n  }\n};\n\n/**\n * 获取时间轴最小帧宽度\n * @param {number} maxMaterialFrame 时间轴上素材的最大帧数，单位 frame\n * @param {number} timeLineWidth 时间轴的长度，单位 px\n * @returns\n */\nconst getMinFrameWidth = (maxMaterialFrame, timeLineWidth) => {\n  const maxMaterialFrameWidth = timeLineWidth * (1 / 3);\n  return maxMaterialFrameWidth / maxMaterialFrame;\n};\n\n/**\n * 获取时间轴合适帧宽度\n * 常量：200px\n */\nconst getMaxFrameWidth = () => 200;\n\n/**\n * 获取时间轴合适帧宽度\n * @param {number} maxMaterialFrame\n * @param {number} timeLineWidth\n * @returns\n */\nconst getFitFrameWidth = (maxMaterialFrame, timeLineWidth) => {\n  const maxMaterialFrameWidth = timeLineWidth * (4 / 5);\n  return maxMaterialFrameWidth / maxMaterialFrame;\n};\n\n/**\n * 微秒转帧数\n * @param {*} μs 需要转换的微秒数\n * @param {number} fps 帧率\n * @returns 帧数\n */\nconst μs2Frame = (μs, fps) => Math.round(μs * (fps / 1000000));\n\n/**\n * 毫秒转帧数\n * @param {*} ms\n * @param {*} fps\n * @returns\n */\nconst ms2Frame = (ms, fps) => Math.round(ms * (fps / 1000));\n\n/**\n * 帧数转毫秒\n * @param {*} frame\n * @param {*} fps\n */\nconst frame2ms = (frame, fps) => (frame / fps) * 1000;\n\n/**\n * 获取时间轴上，视觉素材的宽度\n * @param {number} timelineIn 素材在时间轴上的入点\n * @param {*} timelineOut 素材在时间轴上的出点\n * @param {*} frameWidth 帧宽度\n * @returns\n */\nconst getMaterialWidth = (timelineIn, timelineOut, frameWidth) =>\n  μs2Frame(timelineOut - timelineIn, 30) * frameWidth;\n\n/**\n *  获取当前最大的素材占据的帧\n * @param {Object} coreData 核心数据\n */\n// TODO 本函数目前仅仅计算了视频中的最大素材，实际上应该计算全部素材的最大素材\nconst getMaxFrameOfMaterial = (coreData, currentSectionIndex) => {\n  const visionTrackMaterials =\n    coreData.sections[currentSectionIndex - 1].sectionTimeline.visionTrack\n      .visionTrackMaterials;\n\n  const audioTrackMaterials =\n    coreData.sections[currentSectionIndex - 1].sectionTimeline.audioTrack\n      .audioTrackMaterials;\n\n  let maxtimelineOut = 0;\n  if (visionTrackMaterials) {\n    for (let i = 0; i < visionTrackMaterials.length; i++) {\n      const timelineOut = visionTrackMaterials[i].timelineOut;\n      if (timelineOut > maxtimelineOut) {\n        maxtimelineOut = timelineOut;\n      }\n    }\n  }\n\n  if (audioTrackMaterials) {\n    for (let i = 0; i < audioTrackMaterials.length; i++) {\n      if (audioTrackMaterials[i].voiceType !== \"bgm\") {\n        const timelineOut = audioTrackMaterials[i].timelineOut;\n        if (timelineOut > maxtimelineOut) {\n          maxtimelineOut = timelineOut;\n        }\n      }\n    }\n  }\n\n  return visionTrackMaterials.length === 0 && audioTrackMaterials.length === 0\n    ? 0\n    : μs2Frame(maxtimelineOut, 30);\n};\n\n/**\n * 获得 getVideoTrackMaterialList：视频轴的素材列表\n * 1. 根据 timelineIn 进行升序排列\n * 2. 按照 type 筛选，仅保留 type in [image, video, gif]\n * @param {*} visionTrackMaterials\n */\nconst getVideoTrackMaterialList = visionTrackMaterials => {\n  const tempList = [];\n\n  // 按照 type 进行筛选，仅保留 type in [image, video, gif]\n  for (let i = 0; i < visionTrackMaterials.length; i++) {\n    if (\n      visionTrackMaterials[i].type === \"video\" ||\n      visionTrackMaterials[i].type === \"image\" ||\n      visionTrackMaterials[i].type === \"gif\"\n    ) {\n      tempList.push(visionTrackMaterials[i]);\n    }\n  }\n\n  return tempList.sort((a, b) => a.timelineIn - b.timelineIn);\n};\n\n/**\n * 获取 flatFrameList：它决定了当前屏幕上应该显示哪些帧，以及该缓存哪些帧\n * @param {*} videoFrameWidth\n * @param {*} coreData\n * @param {*} frameWidth\n * @param {*} currentSectionIndex\n * @param {*} timeLineOffsetLeft\n * @param {*} timeLine_width\n * @returns {\n *     videoIndex: 当前视频在 CoreData 中的 index,\n *     frame: 当前帧图的帧数——这将传给 readFrame 函数读帧,\n *     position: 当前帧图的渲染到 background-position 时应该传输的值,\n *     file: 当前帧图的视频源文件——这将传给 readFrame 函数读帧,\n *     priority: 【重点】读帧优先级——这将用于生成 ReadFrameTask 时进行分片\n *               - 0：最高优先级（表示是当前屏幕的帧）\n *               - 1：次优先级（表示是下一屏幕的帧）\n *               - 2：最低优先级（表示是前一屏幕的帧）\n * }[]\n */\nconst getflatFrameList = (\n  videoFrameWidth,\n  coreData,\n  frameWidth,\n  currentSectionIndex,\n  timeLineOffsetLeft,\n  timeLine_width\n) => {\n  // 输入数据检查\n  if (coreData.sections.length === 0) {\n    return [];\n  }\n\n  // 输入数据检查\n  if (\n    coreData.sections[currentSectionIndex - 1].sectionTimeline.visionTrack\n      .visionTrackMaterials.length === 0\n  ) {\n    return [];\n  }\n\n  // 第一步：计算全部视频，在当前 frameWidth 下的全部帧图\n  const visionTrackMaterials =\n    coreData.sections[currentSectionIndex - 1].sectionTimeline.visionTrack\n      .visionTrackMaterials;\n\n  const tempFramesList = [];\n\n  for (let i = 0; i < visionTrackMaterials.length; i++) {\n    // 获取视频素材\n    const material = visionTrackMaterials[i];\n\n    // 计算视频素材的宽度\n    const materialWidth = getMaterialWidth(\n      material.timelineIn,\n      material.timelineOut,\n      frameWidth\n    );\n\n    // 计算视频素材内所需要的帧图数\n    const framesNumber = Math.ceil(materialWidth / videoFrameWidth);\n\n    const tempFrames = [];\n\n    for (let i = 0; i < framesNumber; i++) {\n      let frame = Math.floor(i * (videoFrameWidth / frameWidth));\n      let position = `${i * videoFrameWidth + \"px\"} 0px`;\n\n      tempFrames.push({\n        frame: frame,\n        position: position,\n        file: material.file\n      });\n    }\n    tempFramesList.push(tempFrames);\n  }\n\n  // // console.log(\"getflatFrameList tempFramesList\", tempFramesList);\n\n  // 第二步：根据屏幕偏移量，计算出当前应该渲染的帧图\n  // 计算屏幕前方有多少图片\n  // 计算屏幕内有多少图片\n  const screenFramesNumber = Math.ceil(timeLine_width / videoFrameWidth);\n\n  // 当前是第几个视频的第几帧\n  let currentVideoIndex = 0;\n  let currentFrameIndex = 0;\n\n  let tempTotalMaterialWidth = 0;\n  for (let i = 0; i < visionTrackMaterials.length; i++) {\n    // 获取视频素材\n    const material = visionTrackMaterials[i];\n\n    // 计算视频素材的宽度\n    const materialWidth = getMaterialWidth(\n      material.timelineIn,\n      material.timelineOut,\n      frameWidth\n    );\n\n    tempTotalMaterialWidth += materialWidth;\n\n    if (timeLineOffsetLeft < tempTotalMaterialWidth) {\n      currentVideoIndex = i;\n      currentFrameIndex = Math.floor(\n        (timeLineOffsetLeft - (tempTotalMaterialWidth - materialWidth)) /\n          videoFrameWidth\n      );\n      break;\n    } else if (timeLineOffsetLeft === tempTotalMaterialWidth) {\n      currentVideoIndex = i + 1;\n      currentFrameIndex = 0;\n      break;\n    }\n  }\n\n  // console.log(\"currentVideoIndex: \" + currentVideoIndex);\n  // console.log(\"currentFrameIndex: \" + currentFrameIndex);\n\n  // 计算本次我需要渲染哪一帧\n  // 先计算纯数字，再构建成 flatFrameList 结构\n  // 需要 currentVideoIndex 的 currentFrameIndex 向前找 screenFramesNumber 个帧图\n  // 需要 currentVideoIndex 的 currentFrameIndex 向后找 2*screenFramesNumber 个帧图\n  // 做一个步骤：先拆分，再组装\n  // 拆分 framesList 为 frames\n  const tempList = [];\n\n  // 拆分后的 index\n  let flatCurrentFrameIndex;\n  let count = 0;\n\n  for (let i = 0; i < tempFramesList.length; i++) {\n    const tempFrames = tempFramesList[i];\n    for (let j = 0; j < tempFrames.length; j++) {\n      const tempFrame = tempFrames[j];\n      tempList.push({\n        videoIndex: i,\n        frame: tempFrame.frame,\n        position: tempFrame.position,\n        file: tempFrame.file\n      });\n      if (currentVideoIndex === i && currentFrameIndex === j) {\n        flatCurrentFrameIndex = count;\n      }\n      count++;\n    }\n  }\n\n  // console.log(\"拆分成功\", tempList);\n  // console.log(\n  //   \"拆分后的当前帧在\",\n  //   flatCurrentFrameIndex,\n  //   tempList[flatCurrentFrameIndex]\n  // );\n\n  // 开始的帧图\n  const startFrameIndex =\n    flatCurrentFrameIndex - screenFramesNumber > 0\n      ? flatCurrentFrameIndex - screenFramesNumber\n      : 0;\n\n  // 结束的帧图\n  const endFrameIndex =\n    flatCurrentFrameIndex + 2 * screenFramesNumber - 1 > tempList.length - 1\n      ? tempList.length - 1\n      : flatCurrentFrameIndex + 2 * screenFramesNumber - 1;\n\n  // console.log(\n  //   \"flatCurrentFrameIndex + 2 * screenFramesNumber\",\n  //   flatCurrentFrameIndex + 2 * screenFramesNumber\n  // );\n  // console.log(\"screenFramesNumber\", screenFramesNumber);\n  // console.log(\"tempList.length\", tempList.length - 1);\n\n  // console.log(\"开始的帧图\", startFrameIndex);\n  // console.log(\"结束的帧图\", endFrameIndex);\n\n  // 切分数组：称为一个扁平化的数据\n  const flatFrameList = tempList.slice(startFrameIndex, endFrameIndex + 1);\n  // console.log(\"切分数组成功\", flatFrameList);\n\n  // 切分后的数组的当前帧\n  const afterSliceFlatCurrentFrameIndex =\n    flatCurrentFrameIndex - startFrameIndex;\n\n  // 第三步：获取读帧优先级\n  for (let i = 0; i < flatFrameList.length; i++) {\n    if (i >= 0 && i < afterSliceFlatCurrentFrameIndex) {\n      flatFrameList[i].priority = 2;\n    } else if (\n      i >= afterSliceFlatCurrentFrameIndex &&\n      i < afterSliceFlatCurrentFrameIndex + screenFramesNumber\n    ) {\n      flatFrameList[i].priority = 0;\n    } else if (i >= afterSliceFlatCurrentFrameIndex + screenFramesNumber) {\n      flatFrameList[i].priority = 1;\n    }\n  }\n\n  // console.log(\"读帧优先级获取成功\", flatFrameList);\n  // debugger;\n  return flatFrameList;\n};\n\nconst constructFramesMap = (\n  flatFrameList,\n  videoFrameBuffer,\n  readFrameTaskStack\n) => {\n  // debugger\n  /**\n   * task = {\n      file: File,\n      readFrameList: \"0,374593.975,749187.95,1123781\"\n    }\n   */\n  const taskList = [];\n\n  /**\n   * key: {\n      priority: number,\n      videoIndex: number\n    }\n\n    value: {\n      time,\n      file\n    }[]\n   */\n  const tempMap = new Map();\n\n  // Step 1.1: 为 flatFrame 的 blobUrl 赋值\n  // Step 1.2：为 tempMap 赋值——完成聚类\n  for (let i = 0; i < flatFrameList.length; i++) {\n    const flatFrame = flatFrameList[i];\n    const key = JSON.stringify({\n      videoIndex: flatFrame.videoIndex,\n      frame: flatFrame.frame\n    });\n    if (videoFrameBuffer.has(key)) {\n      flatFrame.blobUrl = videoFrameBuffer.get(key);\n    } else {\n      // 1. 判断 Map 中是否存在组[pririty, videoIndex]\n      const groupKey = JSON.stringify({\n        priority: flatFrame.priority,\n        videoIndex: flatFrame.videoIndex\n      });\n      if (tempMap.has(groupKey)) {\n        tempMap.get(groupKey).push({\n          frame: flatFrame.frame,\n          file: flatFrame.file,\n          videoIndex: flatFrame.videoIndex,\n          priority: flatFrame.priority\n        });\n      } else {\n        const value = [];\n        value.push({\n          frame: flatFrame.frame,\n          file: flatFrame.file,\n          videoIndex: flatFrame.videoIndex,\n          priority: flatFrame.priority\n        });\n        tempMap.set(groupKey, value);\n      }\n    }\n  }\n\n  // 完成聚类\n  // console.log(\"tempMap\", tempMap);\n\n  for (let frameList of tempMap.values()) {\n    const readFrameList = [];\n\n    frameList.forEach(frame => readFrameList.push(frame.frame));\n\n    const task = {\n      file: frameList[0].file,\n      videoIndex: frameList[0].videoIndex,\n      priority: frameList[0].priority,\n      readFrameList: readFrameList\n    };\n\n    taskList.push(task);\n  }\n\n  // Stack：后进先出，所以 priority 越低的数据，越是后被放进去，因此 prority 应该是个降序排列（大的在前），videoIndex 也是个降序排列\n  // 排序：先按照 videoIndex 降序排列，再按照 priority 降序排列\n  taskList.sort((a, b) => b.videoIndex - a.videoIndex);\n  taskList.sort((a, b) => b.priority - a.priority);\n\n  // console.log(\"构建完成 TaskList\", taskList);\n\n  // 将 Task 推送到任务栈内\n  for (let i = 0; i < taskList.length; i++) {\n    readFrameTaskStack.push(taskList[i]);\n  }\n\n  // 推送完之后，去重\n  // deduplicationTask(readFrameTaskStack);\n\n  // 最后一步：将 flatFrameList 格式化为 framesMap\n  const framesMap = new Map();\n\n  for (let i = 0; i < flatFrameList.length; i++) {\n    const flatFrame = flatFrameList[i];\n    const isVideoIndexAlreadyExist = framesMap.has(flatFrame.videoIndex);\n    if (isVideoIndexAlreadyExist) {\n      const frames = framesMap.get(flatFrame.videoIndex);\n      frames.push({\n        blobUrl: flatFrame.blobUrl,\n        frame: flatFrame.frame,\n        position: flatFrame.position\n      });\n    } else {\n      const frames = [];\n      frames.push({\n        blobUrl: flatFrame.blobUrl,\n        frame: flatFrame.frame,\n        position: flatFrame.position\n      });\n      framesMap.set(flatFrame.videoIndex, frames);\n    }\n  }\n\n  // console.log(\"完成 framesMap\", framesMap);\n  // debugger;\n  return framesMap;\n};\n\n/**\n * 为 TaskStack 去重\n * @param {*} taskStack\n */\nconst deduplicationTask = taskStack => {\n  // TODO 去重函数：有效清除 errorCount\n};\n\nexport default {\n  calcTimeLineContainerWidth,\n  frame2Time,\n  frameWidth2Grid,\n  getGridTotalNumber,\n  getTimeScaleWidth,\n  getTimeScalePlaceHolderWidth,\n  gridBufferFirstIndex,\n  renderGridBufferList,\n  getMinFrameWidth,\n  getMaxFrameWidth,\n  getFitFrameWidth,\n  μs2Frame,\n  ms2Frame,\n  frame2ms,\n  second2hms,\n  getMaterialWidth,\n  getMaxFrameOfMaterial,\n  getVideoTrackMaterialList,\n  getflatFrameList,\n  constructFramesMap\n};\n","import { provide, ref, computed, reactive, watchEffect, watch } from \"vue\";\nimport Mapping from \"@/map\";\nimport { ReadFrame } from \"@/viewmodels\";\nimport WASM from \"@/wasm\";\n\n/**\n * This file define global states in project\n */\n\n// 帧宽度\nconst frameWidth = Symbol();\n\n// 格子宽度\nconst gridWidth = Symbol();\n\n// 格子内帧数\nconst gridFrame = Symbol();\n\n// 组格子内帧数\nconst groupGridFrame = Symbol();\n\n// 时间轴容器宽度\nconst timeLineContainer_width = Symbol();\n\n// 时间轴宽度\nconst timeLine_width = Symbol();\n\n// 时间轴刻度尺宽度\nconst timescale_width = Symbol();\n\n// 时间轴偏移量\nconst timeLineOffsetLeft = Symbol();\n\n// 时间轴左偏移占位宽度\nconst timescale_placeholder_width = Symbol();\n\n// 时间轴素材最大帧数\nconst maxFrameOfMaterial = Symbol();\n\n// 最大帧宽度\nconst maxFrameWidth = Symbol();\n\n// 最小帧宽度\nconst minFrameWidth = Symbol();\n\n// 合适帧宽度\nconst fitFrameWidth = Symbol();\n\n// 当前播放的视频 URL\nconst currentVideoUrl = Symbol();\n\n// 项目核心数据\nconst coreData = Symbol();\n\n// 当前段落焦点，初始值为 1\nconst currentSectionIndex = Symbol();\n\n// 读帧用的 Worker\nconst readFrameWorker = Symbol();\n\n// 视频帧图的宽度\nconst VIDEO_FRAME_WIDTH = 92.44;\n\n// 视频帧图的高度\nconst VIDEO_FRAME_HEIGHT = 52;\n\n// WASM ReadFrame 读帧的状态\nconst isReadFrameBusy = Symbol();\n\n// 帧图的内存缓存区\nconst videoFrameBuffer = Symbol();\n\n// 读帧任务栈\nconst readFrameTaskStack = Symbol();\n\n// 扁平帧图列表：决定了当前屏幕上应该显示的帧图+ 前后该缓存的帧图\nconst flatFrameList = Symbol();\n\n// 帧图列表\nconst framesMap = Symbol();\n\n// 当前 ReadFrame 函数在读的视频的 VideoIndex\nconst currentReadFrameVideoIndex = Symbol();\n\n// 临时存储视频帧数（只保存第一个视频的帧数）\nconst videoFrameList = Symbol();\n\nconst currentFile = Symbol();\n\nconst rightCount = Symbol();\n\nconst errorCount = Symbol();\n\nfunction useProvider() {\n  // init data\n  const $timeLineContainer_width = ref(0);\n  const $frameWidth = ref(0.003);\n  const $timeLineOffsetLeft = ref(0);\n  const $currentVideoUrl = ref(\"\");\n  const $coreData = reactive({\n    // 系统参数\n    systemParam: {\n      // 产品代号\n      appType: 0,\n      // 版本号，注意：这里是视频结构化数据格式版本，当前版本 2\n      versionCode: 0,\n      // 平台：ios/android/pc\n      platform: \"pc\"\n    },\n    // 视频元数据\n    videoMetaData: {\n      // 标题\n      title: \"\",\n      // 合成视频宽\n      videoWidth: 0,\n      // 合成视频高\n      videoHeight: 0,\n      // 封面\n      coverUrl: \"\",\n      // 合成视频总时长，单位：微秒\n      duration: 0,\n      // 素材总大小，单位：byte，服务端返回结构化数据时，会计算该参数的值\n      materialTotalSize: 0,\n      // 是否添加片尾（1：是，0：否）\n      appendTailStatus: 0,\n      // 画布类型（1：原始，2：9比16，3：1比1，4：16比9）\n      canvasType: 0\n    },\n    // 全局设置\n    globalSetting: {\n      // 画布类型（1：原始，2：9比16，3：1比1，4：16比9）\n      canvasType: 1,\n      // 是否添加片尾（1：是，0：否）\n      appendTailStatus: 0,\n      // 是否添加自动特效（1：是，0：否）\n      addAutoEffect: 0,\n      // 视频音量增益，保留一位小数，取值范围 0.0 - 10.0，大于1，表示音量增强。小于1，表示音量减小。0.0 表示静音\n      videoVolumeGain: 0.0,\n      // 字幕位置布局：(bottom/center/top)\n      subtitleLayoutType: \"\",\n      // 字幕字体\n      subtiitleFontSize: 0,\n      // 字幕字体颜色\n      subtitleFontColor: \"\",\n      // 字幕背景色\n      subtitleBgColor: \"\"\n    },\n    // 段落列表\n    sections: [\n      {\n        // 段落类型（普通段：normal/全局段：global）\n        sectionType: \"normal\",\n        // 段落序号，从1开始\n        sectionIndex: 1,\n        // 段落文字\n        sectionText: \"\",\n        // 段落相对于项目时间线的入点，单位：微秒\n        projecttimelineIn: 0,\n        // 段落相对于项目时间线的出点，单位：微秒\n        projecttimelineOut: 0,\n        // 段落时长，单位：微秒\n        duration: 0,\n        // 段落时间线\n        sectionTimeline: {\n          // 视觉轨\n          visionTrack: {\n            // 素材数量\n            count: 0,\n            // 视觉轨道时长，单位：微秒\n            duration: 0,\n            // 视觉轨素材列表\n            visionTrackMaterials: [\n              // {\n              //   // 素材id（素材类型为subtitle时ID可以为空）\n              //   id: 0,\n              //   // 素材类型（image, video, gif, subtitle）\n              //   type: \"\",\n              //   // 素材宽\n              //   width: 0,\n              //   // 素材高\n              //   height: 0,\n              //   // 素材时长，单位：微秒\n              //   duration: 0,\n              //   // 素材旋转角度\n              //   rotate: 0,\n              //   // 素材相对于时间线的入点，单位：微秒\n              //   timelineIn: 0,\n              //   // 素材相对于时间线的出点，单位：微秒\n              //   timelineOut: 0,\n              //   // 素材片段相对于素材的入点，单位：微秒\n              //   in: 0,\n              //   // 素材片段相对于素材的出点，单位：微秒\n              //   out: 0,\n              //   // 音量增益，保留一位小数，取值范围 0.00 - 10.00，大于1，表示音量增强。小于1，表示音量减小。0.0 表示静音，1 表示原始音量\n              //   volumeGain: 0.0,\n              //   // 画布填充方式（full:充满画布，complete:完整显示）\n              //   canvasFillType: \"\",\n              //   // 字幕信息，当素材类型为subtitle时需要传值\n              //   subtitleInfo: {\n              //     // 位置布局\n              //     layoutType: \"\",\n              //     // 字幕内容\n              //     text: \"\",\n              //     // 字体\n              //     font: \"\",\n              //     // 字号\n              //     fontSize: 0,\n              //     // 字体颜色\n              //     fontColor: \"\",\n              //     // 背景色\n              //     bgColor: \"\",\n              //     // 字幕内容对应的 tts url\n              //     ttsMediaUrl: \"\"\n              //   },\n              //   // 素材时长适配方式\n              //   materialDurationFit: {\n              //     // 适配方式（multiple:倍数, loop:循环，staticFrame:定帧）\n              //     fitType: \"\",\n              //     // 倍数值，0.1 - 10  大于1表示快速，小于1表示慢速\n              //     multipleValue: 0.0,\n              //     // 循环次数\n              //     loopValue: 0\n              //   },\n              //   // 素材尺寸裁剪\n              //   materialSizeClip: {\n              //     // 相对于 TopLeft 的偏移坐标 x\n              //     x: 0,\n              //     // 相对于 TopLeft 的偏移坐标 y\n              //     y: 0,\n              //     // 剪裁后的宽\n              //     width: 0,\n              //     // 剪裁后的高\n              //     height: 0,\n              //     // 缩放比例\n              //     scale: 0,\n              //     // 旋转角度\n              //     rotate: 0\n              //   },\n              //   // 素材位置\n              //   materialPosition: {\n              //     // 相对于 TopLeft 的偏移坐标 x\n              //     x: 0,\n              //     // 相对于 TopLeft 的偏移坐标 y\n              //     y: 0,\n              //     // 在画布中的宽\n              //     width: 0,\n              //     // 在画布中的高\n              //     height: 0\n              //   },\n              //   // 素材图层\n              //   materialLayer: {\n              //     // 图层\n              //     layer: 0\n              //   },\n              //   // 素材特效\n              //   materialEffect: {\n              //     // 特效类型\n              //     type: \"\",\n              //     // 特效参数\n              //     params: \"\"\n              //   },\n              //   // 素材url，前端不需要传值，服务端返回sdata数据时，会根据素材ID赋值\n              //   materialUrl: \"\",\n              //   // 素材文件内容 md5 值\n              //   contentMd5: \"\"\n              // }\n            ]\n          },\n          // 音频轨\n          audioTrack: {\n            // 素材数量\n            count: 0,\n            // 音频轨道时长\n            duration: 0,\n            // 音频轨素材列表\n            audioTrackMaterials: [\n              // {\n              //   // 素材 id\n              //   id: 0,\n              //   // 素材类型\n              //   type: \"\",\n              //   // 音频类型\n              //   voiceType: \"\",\n              //   // 素材时长\n              //   duration: 0,\n              //   // 素材相对于时间线的入点\n              //   timelineIn: 0,\n              //   // 素材相对于时间线的出点\n              //   timelineOut: 0,\n              //   // 素材片段相对于素材的入点\n              //   in: 0,\n              //   // 素材片段相对于素材的出点\n              //   out: 0,\n              //   // 音量增益\n              //   volumeGain: 0.0,\n              //   // 素材时长适配方式\n              //   materialDurationFit: {\n              //     // 适配方式（multiple:倍数, loop:循环，staticFrame:定帧）\n              //     fitType: \"\",\n              //     // 倍数值，0.1 - 10  大于1表示快速，小于1表示慢速\n              //     multipleValue: 0.0,\n              //     // 循环次数\n              //     loopValue: 0\n              //   },\n              //   // 合成语音配置信息\n              //   produceVoiceConfig: {\n              //     // 渠道（aliyun/deepsound/azure/cmww）\n              //     channel: \"\",\n              //     // 发音人\n              //     voice: \"\",\n              //     // aliyun 音量\n              //     volume: 0,\n              //     // aliyun 语速\n              //     speechRate: 0,\n              //     // aliyun 语调\n              //     pitchRate: 0,\n              //     // deepsound 音量\n              //     deepsoundVolume: \"\",\n              //     // deepsound语速（取值为lower/low/normal/high/higher，默认normal表示选择中等语速）\n              //     deepsoundSpeechRate: \"\",\n              //     // deepsound语调（取值为lower/low//high/higher，默认normal表示选择中等音调）\n              //     deepsoundPitchRate: \"\",\n              //     // azure音量（0.0 到 150.0（从最安静到最大声）， 默认值为 100）\n              //     azureVolume: \"\",\n              //     // azure语速，取值为0.00-2.00，默认为1.0，如果值为 1，则速率不会变化。 如果值为 0.5，则速率会减慢一半。 如果值为 2，则速率为2倍\n              //     azureSpeechRate: \"\",\n              //     // azure语调，取值为-50%-50%，默认为0%\n              //     azurePitchRate: \"\",\n              //     // azure语音风格，默认为 general\n              //     azureStyle: \"\",\n              //     // azure句末停顿时间，默认0ms\n              //     azureEndBreakTime: \"\",\n              //     // cmww 音量\n              //     cmwwVolume: 0.0,\n              //     // cmww 语速\n              //     cmwwSpeechRate: 0.0,\n              //     // cmww语调（-10 - 10，默认值 0）\n              //     cmwwPitchRate: 0.0,\n              //     // cmww语气，默认无\n              //     cmwwStyle: \"\"\n              //   },\n              //   // 背景音乐信息\n              //   bgmInfo: {\n              //     // 音乐 ID\n              //     musicId: \"\",\n              //     // 分类 ID\n              //     cateId: 0,\n              //     // 音乐来源\n              //     originType: 0,\n              //     // 选择的声音类型，1：原声 ，2：背景声\n              //     selectVoiceType: 0,\n              //     // 卡点音乐节奏速度（1：快节奏，2：适中，3：慢节奏）\n              //     rhythmMusicSpeed: 0\n              //   },\n              //   // 素材 url\n              //   materialUrl: \"\",\n              //   // 素材文件内容 md5\n              //   contentMd5: \"\"\n              // }\n            ]\n          }\n        },\n        // 是否添加自动特效（1：是，0：否）\n        addAutoEffect: 0,\n        // 扩展字段，json string\n        sectionExtData: \"\"\n      }\n    ]\n  });\n  const $currentSectionIndex = ref(1);\n  const $readFrameWorker = ref(\n    new Worker(process.env.BASE_URL + \"readFrame-lib/readFrameWorker.js\")\n  );\n  const $videoFrameList = ref([]);\n  const $currentFile = ref();\n  const $isReadFrameBusy = ref(false);\n  const $videoFrameBuffer = ref(new Map());\n  const $flatFrameList = ref([]);\n  const $currentReadFrameVideoIndex = ref(0);\n\n  // watchEffect data\n  const $gridWidth = ref(0);\n  const $gridFrame = ref(0);\n  const $groupGridFrame = ref(0);\n  const $timeLine_width = ref(0);\n  const $timescale_width = ref(0);\n  const $timescale_placeholder_width = ref(0);\n  const $maxFrameWidth = ref(Mapping.getMaxFrameWidth());\n  const $minFrameWidth = ref(0);\n  const $fitFrameWidth = ref(0);\n  const $maxFrameOfMaterial = ref(0);\n  const $readFrameTaskStack = ref([]);\n\n  const $rightCount = ref(0);\n  const $errorCount = ref(0);\n\n  watchEffect(() => {\n    $maxFrameOfMaterial.value = getMaxFrameOfMaterial(\n      $coreData,\n      $currentSectionIndex.value\n    );\n  });\n\n  watchEffect(() => {\n    $gridWidth.value = getGridWidth($frameWidth.value);\n  });\n  watchEffect(() => {\n    $gridFrame.value = getGridFrame($frameWidth.value);\n  });\n  watchEffect(() => {\n    $groupGridFrame.value = getGroupGridFrame($frameWidth.value);\n  });\n  watchEffect(() => {\n    $timeLine_width.value = getTimeLineWidth($timeLineContainer_width.value);\n  });\n  watchEffect(() => {\n    $timescale_width.value = getTimeScaleWidth(\n      $frameWidth.value,\n      $timeLine_width.value,\n      $maxFrameOfMaterial.value\n    );\n  });\n  watchEffect(() => {\n    $timescale_placeholder_width.value = getTimeScalePlaceHolderWidth(\n      $timeLineOffsetLeft.value,\n      $gridWidth.value\n    );\n  });\n  watchEffect(() => {\n    $minFrameWidth.value = getMinFrameWidth(\n      $maxFrameOfMaterial.value,\n      $timeLine_width.value\n    );\n  });\n  watchEffect(() => {\n    $fitFrameWidth.value = getFitFrameWidth(\n      $maxFrameOfMaterial.value,\n      $timeLine_width.value\n    );\n  });\n\n  watchEffect(() => {\n    $flatFrameList.value = Mapping.getflatFrameList(\n      VIDEO_FRAME_WIDTH,\n      $coreData,\n      $frameWidth.value,\n      $currentSectionIndex.value,\n      $timeLineOffsetLeft.value,\n      $timeLine_width.value\n    );\n  });\n\n  const $framesMap = computed(() =>\n    Mapping.constructFramesMap(\n      $flatFrameList.value,\n      $videoFrameBuffer.value,\n      $readFrameTaskStack.value\n    )\n  );\n\n  watchEffect(() => {\n    ReadFrame.excuteReadFrameTask(\n      $readFrameTaskStack,\n      $isReadFrameBusy,\n      $currentReadFrameVideoIndex,\n      $readFrameWorker,\n      VIDEO_FRAME_WIDTH,\n      VIDEO_FRAME_HEIGHT,\n      $videoFrameBuffer,\n      $rightCount,\n      $errorCount\n    );\n  });\n\n  watchEffect(() => {\n    console.log(\"rightCount: \" + $rightCount.value);\n  });\n\n  watchEffect(() => {\n    console.log(\"errorCount: \" + $errorCount.value);\n  });\n\n  // watchEffect(() => {\n  //   // 计算视频帧列表\n  //   // 1. 视频有多长\n  //   if (\n  //     $coreData.sections[$currentSectionIndex.value - 1].sectionTimeline\n  //       .visionTrack.visionTrackMaterials.length !== 0\n  //   ) {\n  //     const visionTrackMaterial =\n  //       $coreData.sections[$currentSectionIndex.value - 1].sectionTimeline\n  //         .visionTrack.visionTrackMaterials[0];\n\n  //     const videoWidth = Mapping.getMaterialWidth(\n  //       visionTrackMaterial.timelineIn,\n  //       visionTrackMaterial.timelineOut,\n  //       $frameWidth.value\n  //     );\n\n  //     // 2. 一帧有多长\n  //     const videoFrameWidth = 49;\n\n  //     // 3. 一共需要渲染多少帧\n  //     const frameNumber = Math.ceil(videoWidth / videoFrameWidth);\n\n  //     console.log(\"frameNumber\", frameNumber);\n\n  //     // 4. 每一帧的开头是多少毫秒\n  //     const tempList = [];\n\n  //     for (let i = 0; i < frameNumber; i++) {\n  //       let frameMs = 0;\n  //       if (i === 0) {\n  //         frameMs = 0;\n  //       } else {\n  //         frameMs = Mapping.frame2ms(\n  //           i * (videoFrameWidth / $frameWidth.value),\n  //           30\n  //         );\n  //       }\n  //       tempList.push(frameMs);\n  //     }\n\n  //     // 开始读帧\n  //     const readFrameList = tempList.join(\",\");\n  //     console.log(\"全部参数\")\n  //     console.log(\"readFrameList origin\", readFrameList);\n\n  //     console.log(\n  //       \"readFrameList\",\n  //       tempList.map(item => Mapping.second2hms(item / 1000))\n  //     );\n\n  //     WASM.readFrame(\n  //       $readFrameWorker.value,\n  //       $currentFile.value,\n  //       49,\n  //       52,\n  //       readFrameList,\n  //       url => {\n  //         console.log(\"url\", url);\n  //         // console.log(\"$videoFrameList.value\", $videoFrameList.value);\n  //         $videoFrameList.value.push({ url: url });\n  //       }\n  //     );\n  //   }\n  // });\n\n  // provide\n  provide(timeLineContainer_width, $timeLineContainer_width);\n  provide(timeLine_width, $timeLine_width);\n  provide(timescale_width, $timescale_width);\n  provide(frameWidth, $frameWidth);\n  provide(timeLineOffsetLeft, $timeLineOffsetLeft);\n  provide(gridWidth, $gridWidth);\n  provide(gridFrame, $gridFrame);\n  provide(groupGridFrame, $groupGridFrame);\n  provide(maxFrameOfMaterial, $maxFrameOfMaterial);\n  provide(timescale_placeholder_width, $timescale_placeholder_width);\n  provide(currentVideoUrl, $currentVideoUrl);\n  provide(readFrameWorker, $readFrameWorker);\n  provide(maxFrameWidth, $maxFrameWidth);\n  provide(minFrameWidth, $minFrameWidth);\n  provide(fitFrameWidth, $fitFrameWidth);\n  provide(coreData, $coreData);\n  provide(currentSectionIndex, $currentSectionIndex);\n  provide(videoFrameList, $videoFrameList);\n  provide(currentFile, $currentFile);\n  provide(isReadFrameBusy, $isReadFrameBusy);\n  provide(videoFrameBuffer, $videoFrameBuffer);\n  provide(readFrameTaskStack, $readFrameTaskStack);\n  provide(flatFrameList, $flatFrameList);\n  provide(framesMap, $framesMap);\n  provide(currentReadFrameVideoIndex, $currentReadFrameVideoIndex);\n  provide(rightCount, $rightCount);\n  provide(errorCount, $errorCount);\n}\n\n// GETTER METHOD\nconst getGridWidth = frameWidth => {\n  return Mapping.frameWidth2Grid(frameWidth).gridWidth;\n};\n\nconst getGridFrame = framWidth => Mapping.frameWidth2Grid(framWidth).gridFrame;\n\nconst getGroupGridFrame = frameWidth =>\n  Mapping.frameWidth2Grid(frameWidth).groupGridFrame;\n\nconst getTimeLineWidth = timeLineContainer_width =>\n  timeLineContainer_width - 37;\n\nconst getTimeScaleWidth = (frameWidth, timeLine_width, maxFrameOfMaterial) =>\n  Mapping.getTimeScaleWidth(frameWidth, timeLine_width, maxFrameOfMaterial);\n\nconst getTimeScalePlaceHolderWidth = (timeLineOffsetLeft, gridWidth) =>\n  Mapping.getTimeScalePlaceHolderWidth(timeLineOffsetLeft, gridWidth);\n\nconst getMinFrameWidth = (maxFrameOfMaterial, timeLine_width) =>\n  Mapping.getMinFrameWidth(maxFrameOfMaterial, timeLine_width);\n\nconst getFitFrameWidth = (maxFrameOfMaterial, timeLine_width) =>\n  Mapping.getFitFrameWidth(maxFrameOfMaterial, timeLine_width);\n\nconst getMaxFrameOfMaterial = (coreData, currentSectionIndex) =>\n  Mapping.getMaxFrameOfMaterial(coreData, currentSectionIndex);\n\nexport default {\n  useProvider,\n  timeLineContainer_width,\n  timeLine_width,\n  timescale_width,\n  frameWidth,\n  timeLineOffsetLeft,\n  gridWidth,\n  gridFrame,\n  groupGridFrame,\n  maxFrameOfMaterial,\n  timescale_placeholder_width,\n  currentVideoUrl,\n  maxFrameWidth,\n  minFrameWidth,\n  fitFrameWidth,\n  coreData,\n  currentSectionIndex,\n  readFrameWorker,\n  videoFrameList,\n  currentFile,\n  isReadFrameBusy,\n  videoFrameBuffer,\n  readFrameTaskStack,\n  flatFrameList,\n  framesMap,\n  currentReadFrameVideoIndex,\n  VIDEO_FRAME_HEIGHT,\n  rightCount,\n  errorCount\n};\n","const USER = 'USER_KEY'\n\n// 持久化保存用户信息\nexport const setUser = user => {\n  localStorage.setItem(USER, JSON.stringify(user))\n}\n\n// 获取保存的用户信息\nexport const getUser = () =>\n  localStorage.getItem(USER) ? JSON.parse(localStorage.getItem(USER)) : null\n\n// 删除用户信息\nexport const removeUser = () => {\n  localStorage.removeItem(USER)\n}\n","/* eslint-disable no-async-promise-executor */\n/**\n * 获取一个视频的时长，单位微秒\n * @param {*} videoFile\n * @returns\n */\nconst getVideoDuration = videoFile =>\n  new Promise((resolve, reject) => {\n    try {\n      const url = URL.createObjectURL(videoFile);\n      const tempAudio = new Audio(url);\n      tempAudio.addEventListener(\"loadedmetadata\", () => {\n        console.log(\"getVideoDuration success\", tempAudio.duration);\n        resolve(tempAudio.duration * 1000000);\n      });\n    } catch (error) {\n      console.log(\"getVideoDuration error\", error);\n      throw error;\n    }\n  });\n\n/**\n * 获取一个视频的宽和高\n * @param {*} videoFile\n * @returns\n */\nconst getVideoHeightWidth = videoFile =>\n  new Promise((resolve, reject) => {\n    try {\n      const video = document.createElement(\"video\");\n\n      video.preload = \"metadata\";\n\n      video.src = URL.createObjectURL(videoFile);\n\n      video.onloadedmetadata = () => {\n        URL.revokeObjectURL(video.src);\n        console.log(\"getVideoHeightWidth success\", {\n          width: video.videoWidth,\n          height: video.videoHeight\n        });\n        resolve({ width: video.videoWidth, height: video.videoHeight });\n      };\n    } catch (error) {\n      console.log(\"getVideoHeightWidth error\", error);\n      reject(error);\n    }\n  });\n\n/**\n * 获取多个视频的时长，单位微秒\n * @param {*} videoFile\n * @returns\n */\nconst getVideoListDuration = videoFileList =>\n  new Promise(async (resolve, reject) => {\n    try {\n      let totalDuration = 0;\n      for (let i = 0; i < videoFileList.length; i++) {\n        const videoFile = videoFileList[i];\n        const duration = await getVideoDuration(videoFile);\n        totalDuration += duration;\n      }\n      console.log(\"getVideoListDuration success\", totalDuration);\n      resolve(totalDuration * 1000000);\n    } catch (error) {\n      console.log(\"getVideoListDuration error\", error);\n      reject(error);\n    }\n  });\n\n/**\n * 将 videoFileList 中的视频，加入到 CoreData 中去\n * @param {*} coreData\n * @param {*} videoFileList\n * @param {*} currentSectionIndex\n * @returns\n */\nconst addVideoToCoreData = (coreData, videoFileList, currentSectionIndex) =>\n  new Promise(async (resolve, reject) => {\n    try {\n      // 准备加入 CoreData 的视频素材\n      const tempVisionTrackMaterials = [];\n\n      // 获取视频素材中最大的 timelineOut\n      let maxtimelineOut = 0;\n\n      const visionTrackMaterials =\n        coreData.sections[currentSectionIndex - 1].sectionTimeline.visionTrack\n          .visionTrackMaterials;\n\n      for (let i = 0; i < visionTrackMaterials.length; i++) {\n        const timelineOut = visionTrackMaterials[i].timelineOut;\n        if (timelineOut > maxtimelineOut) {\n          maxtimelineOut = timelineOut;\n        }\n      }\n\n      // 构建 tempVisionTrackMaterials\n      for (let i = 0; i < videoFileList.length; i++) {\n        const videoFile = videoFileList[i];\n\n        // 当前素材的时长\n        const duration = await getVideoDuration(videoFile);\n\n        // 当前素材的 timelineIn 为 maxtimelineOut，当然如果没有前面的素材，timelineIn 为 0\n        const timelineIn =\n          i === 0\n            ? maxtimelineOut\n            : tempVisionTrackMaterials[i - 1].timelineOut;\n\n        const timelineOut = timelineIn + duration;\n\n        const { width, height } = await getVideoHeightWidth(videoFile);\n\n        tempVisionTrackMaterials.push({\n          type: \"video\",\n          width: width,\n          height: height,\n          duration: duration,\n          timelineIn: timelineIn,\n          timelineOut: timelineOut,\n          url: URL.createObjectURL(videoFile),\n          file: videoFile\n        });\n      }\n\n      // 将 tempVisionTrackMaterials 加入 coreData\n      for (let i = 0; i < tempVisionTrackMaterials.length; i++) {\n        coreData.sections[\n          currentSectionIndex - 1\n        ].sectionTimeline.visionTrack.visionTrackMaterials.push(\n          tempVisionTrackMaterials[i]\n        );\n      }\n\n      console.log(\"addVideoToCoreData success\");\n      resolve();\n    } catch (error) {\n      console.log(\"addVideoToCoreData error\", error);\n      reject(error);\n    }\n  });\n\nexport default {\n  getVideoDuration,\n  getVideoListDuration,\n  addVideoToCoreData,\n  getVideoHeightWidth\n};\n","import Api from \"@/api\";\n\n/**\n * 上传 VideoList\n * @param {*} videoList\n * @param {*} currentVideoUrl\n * @param {*} coreData\n * @param {*} frameWidth\n * @param {*} fitFrameWidth\n */\nconst addVideoOnCurrentSection = async (\n  videoList,\n  currentVideoUrl,\n  coreData,\n  frameWidth,\n  fitFrameWidth,\n  currentSectionIndex,\n  videoInputElement\n) => {\n  // 暂时先仅加载第一个视频的 URL\n  if (videoList.length > 0) {\n    currentVideoUrl.value = URL.createObjectURL(videoList[0]);\n  }\n\n  // console.log(\"currentVideoUrl loaded\", currentVideoUrl.value);\n\n  await Api.addVideoToCoreData(coreData, videoList, currentSectionIndex.value);\n  \n  frameWidth.value = fitFrameWidth.value;\n\n  videoInputElement.value.value = null;\n};\n\nconst clearVideoOfCurrentSection = async (\n  currentVideoUrl,\n  coreData,\n  currentSectionIndex,\n  frameWidth,\n  fitFrameWidth\n) => {\n  // 清空当前的 currentVideoUrl\n  currentVideoUrl.value = null;\n\n  // 清空当前的 coreDaata\n  coreData.sections[\n    currentSectionIndex.value - 1\n  ].sectionTimeline.visionTrack.visionTrackMaterials = [];\n\n  frameWidth.value = fitFrameWidth.value;\n};\n\nexport default { addVideoOnCurrentSection, clearVideoOfCurrentSection };\n","/**\n * 放大时间轴\n * @param {*} frameWidth\n * @param {*} minFrameWidth\n * @param {*} maxFrameWidth\n */\nconst zoomIn = (frameWidth, maxFrameWidth) => {\n  const targetFrameWidth = frameWidth.value * 2;\n  frameWidth.value =\n    targetFrameWidth > maxFrameWidth.value\n      ? maxFrameWidth.value\n      : targetFrameWidth;\n};\n\n/**\n * 缩小时间轴\n * @param {*} frameWidth\n * @param {*} minFrameWidth\n * @param {*} maxFrameWidth\n */\nconst zoomOut = (frameWidth, minFrameWidth) => {\n  const targetFrameWidth = frameWidth.value / 2;\n  frameWidth.value =\n    targetFrameWidth < minFrameWidth.value\n      ? minFrameWidth.value\n      : targetFrameWidth;\n};\n\n/**\n * 缩放时间轴到合适距离\n * @param {*} frameWidth\n * @param {*} fitFrameWidth\n */\nconst zoomFit = (frameWidth, fitFrameWidth) => {\n  frameWidth.value = fitFrameWidth.value;\n};\n\nexport default { zoomIn, zoomOut, zoomFit };\n","import WASM from \"@/wasm\";\nimport Mapping from \"@/map\";\n\n/**\n * 优化 TaskStack 栈：去掉其中重复阅读的帧\n * @param {*} currentTask \n * @param {*} readFrameTaskStack \n * @param {*} videoFrameBuffer \n * @returns \n */\nconst optimizeTaskStack = (\n  currentTask,\n  readFrameTaskStack,\n  videoFrameBuffer\n) => {\n  const currentTaskHashMap = new Map();\n  currentTask.readFrameList.forEach(frame =>\n    currentTaskHashMap.set(\n      JSON.stringify({ videoIndex: currentTask.videoIndex, frame: frame }),\n      \"\"\n    )\n  );\n\n  for (let i = 0; i < readFrameTaskStack.length; i++) {\n    const task = readFrameTaskStack[i];\n    const readFrameList = task.readFrameList.filter(frame => {\n      const isFrameInVideoFrameBuffer = videoFrameBuffer.has(\n        JSON.stringify({ videoIndex: task.videoIndex, frame: frame })\n      );\n      const isFrameInCurrentTask = currentTaskHashMap.has(\n        JSON.stringify({ videoIndex: task.videoIndex, frame: frame })\n      );\n      return !isFrameInVideoFrameBuffer && !isFrameInCurrentTask;\n    });\n    task.readFrameList = readFrameList;\n  }\n\n  return readFrameTaskStack.filter(task => task.readFrameList.length !== 0);\n};\n\nconst excuteReadFrameTask = (\n  readFrameTaskStack,\n  isReadFrameBusy,\n  currentReadFrameVideoIndex,\n  readFrameWorker,\n  videoFrameWidth,\n  videoFrameHeight,\n  videoFrameBuffer,\n  rightCount,\n  errorCount\n) => {\n  if (\n    isReadFrameBusy.value === false &&\n    readFrameTaskStack.value.length !== 0\n  ) {\n    const task = readFrameTaskStack.value.pop();\n    // 优化 readFrameTaskStack\n    // debugger;\n    readFrameTaskStack.value = optimizeTaskStack(\n      task,\n      readFrameTaskStack.value,\n      videoFrameBuffer.value\n    );\n    // 优化完成\n    // debugger;\n\n    const readFrameList = task.readFrameList\n      .map(frame => Mapping.frame2ms(frame, 30))\n      .join(\",\");\n    currentReadFrameVideoIndex.value = task.videoIndex;\n    WASM.readFrame(\n      readFrameWorker.value,\n      task.file,\n      videoFrameWidth,\n      videoFrameHeight,\n      readFrameList,\n      isReadFrameBusy,\n      currentReadFrameVideoIndex,\n      (blobUrl, frame, videoIndex) => {\n        // if (videoIndex !== currentReadFrameVideoIndex.value) {\n        //   console.log(\"shit\", videoIndex, currentReadFrameVideoIndex.value);\n        // }\n        const key = JSON.stringify({\n          videoIndex: videoIndex,\n          frame: frame\n        });\n\n        const value = blobUrl;\n\n        // console.log(\"key: \" + key);\n        // console.log(\"value: \" + value);\n\n        if (!videoFrameBuffer.value.has(key)) {\n          videoFrameBuffer.value.set(key, value);\n          rightCount.value++;\n        } else {\n          errorCount.value++;\n        }\n      }\n    );\n  }\n};\n\nexport default {\n  excuteReadFrameTask\n};\n","import Mapping from \"@/map\";\n\nconst InitFFCodecReq = 0;\nconst CloseFFDecodeReq = 1;\nconst StartDecodeReq = 2;\nconst AudioPCMFrameRsp = 3;\nconst VideoRGBFrameRsp = 4;\nconst OnMessageEvent = 5;\nconst StartDecodeEndRsp = 6;\nconst InitFFCodecRsp = 7;\nconst MediaInfoRsp = 8;\nconst StopDecodeReq = 9;\nconst StopDecodeRsp = 10;\n\n/**\n * 视频读帧函数\n * @param {*} worker 必须传入 public/readFrame-lib/readFrameWorker.js\n * @param {*} videoFile 传入需要解析的视频文件\n * @param {*} outputWidth 输出视频的宽度\n * @param {*} outputHeight 输出视频的高度\n * @param {*} readFrameList 需要阅读的帧数，请用 \"200, 300, 44444\" 这样子的数组传入\n * @param {*} isReadFrameBusy 读帧函数当前处于什么状态\n * @param {*} callback 回调函数：会返回图片的 blob 地址\n */\nconst readFrame = (\n  worker,\n  videoFile,\n  outputWidth,\n  outputHeight,\n  readFrameList,\n  isReadFrameBusy,\n  currentReadFrameVideoIndex,\n  callback\n) => {\n  isReadFrameBusy.value = true;\n\n  // console.log(\n  //   \"execute readFrame file\",\n  //   currentReadFrameVideoIndex.value,\n  //   videoFile.name,\n  //   readFrameList\n  // );\n  // 初始化：传入 videoFile、outputWidth、outputHeiight\n  worker.postMessage({\n    what: InitFFCodecReq,\n    isDebug: 0,\n    fileSize: -1,\n    fileData: null,\n    file: videoFile,\n    disableType: 1,\n    outScaleWidth: outputWidth,\n    outScaleHeight: outputHeight,\n    isAddBlack: 0,\n    outFps: 15,\n    ffthreadCount: 1,\n    outVideoFormat: -1\n  });\n\n  // 监听消息\n  worker.onmessage = function (response) {\n    const data = response.data;\n    switch (data.what) {\n      case VideoRGBFrameRsp:\n        // 获取返回参数\n        var rgbBuffers = data.data;\n        var timestamp = data.timestamp;\n        var rgbSize = data.size;\n        var videoWidth = data.width;\n        var videoHeight = data.height;\n\n        // 创建一个 RGBA 的容器\n        var imageData = new ImageData(rgbBuffers, videoWidth, videoHeight);\n\n        var canvas = new OffscreenCanvas(videoWidth, videoHeight);\n\n        var context = canvas.getContext(\"2d\");\n\n        context.putImageData(imageData, 0, 0, 0, 0, videoWidth, videoHeight);\n\n        var videoIndex = currentReadFrameVideoIndex.value;\n\n        // console.log(\n        //   `读帧成功 pre：\n        //   key:${videoIndex},\n        //   currentKey:${currentReadFrameVideoIndex.value}\n        //   file:${videoFile.name},\n        //   frame:${Mapping.ms2Frame(timestamp, 30)},\n        //   imageData:${imageData}`\n        // );\n\n        // // 返回 imageData\n        // var blob = await canvas.convertToBlob();\n        // var blobUrl = URL.createObjectURL(blob);\n\n        // console.log(\n        //   `读帧成功 after\n        //   key:${videoIndex},\n        //   currentKey:${currentReadFrameVideoIndex.value}\n        //   file:${videoFile.name},\n        //   frame:${Mapping.ms2Frame(timestamp, 30)},\n        //   imageData:${imageData},\n        //   blobUrl:${blobUrl},`\n        // );\n\n        canvas\n          .convertToBlob()\n          .then(blob =>\n            callback(\n              URL.createObjectURL(blob),\n              Mapping.ms2Frame(timestamp, 30),\n              videoIndex\n            )\n          );\n        break;\n      case OnMessageEvent:\n        // console.log(\"fuck OnMessageEvent\", data);\n        break;\n      case StartDecodeEndRsp:\n        // console.log(\"fuck StartDecodeEndRsp\", data);\n        isReadFrameBusy.value = false;\n        break;\n      case InitFFCodecRsp:\n        // console.log(\"fuck InitFFCodecRsp\", data);\n        worker.postMessage({\n          what: StartDecodeReq,\n          startTimeMs: 0,\n          endTimeMs: -1,\n          rangeFrameCounts: readFrameList\n        });\n        break;\n      case StopDecodeRsp:\n        // console.log(\"fuck StopDecodeRsp\", data);\n        break;\n      case MediaInfoRsp:\n        // console.log(\"fuck MediaInfoRsp\", data);\n        break;\n    }\n  };\n};\n\nexport default { readFrame };\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// getDefaultExport function for compatibility with non-harmony modules\n__webpack_require__.n = function(module) {\n\tvar getter = module && module.__esModule ?\n\t\tfunction() { return module['default']; } :\n\t\tfunction() { return module; };\n\t__webpack_require__.d(getter, { a: getter });\n\treturn getter;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.f = {};\n// This file contains only the entry chunk.\n// The chunk loading function for additional chunks\n__webpack_require__.e = function(chunkId) {\n\treturn Promise.all(Object.keys(__webpack_require__.f).reduce(function(promises, key) {\n\t\t__webpack_require__.f[key](chunkId, promises);\n\t\treturn promises;\n\t}, []));\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"js/\" + chunkId + \".\" + {\"69\":\"1aaead47\",\"163\":\"1c13c774\",\"239\":\"4b907141\",\"602\":\"b7ff892a\",\"823\":\"57d1eb01\",\"868\":\"fb21a8f0\"}[chunkId] + \".js\";\n};","// This function allow to reference async chunks\n__webpack_require__.miniCssF = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"css/\" + chunkId + \".\" + {\"69\":\"92a32fce\",\"163\":\"30afe7be\",\"239\":\"d30f91d4\",\"602\":\"8a8c86ac\",\"868\":\"9f04aeaa\"}[chunkId] + \".css\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","var inProgress = {};\nvar dataWebpackPrefix = \"frontend:\";\n// loadScript function to load a script via script tag\n__webpack_require__.l = function(url, done, key, chunkId) {\n\tif(inProgress[url]) { inProgress[url].push(done); return; }\n\tvar script, needAttach;\n\tif(key !== undefined) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tfor(var i = 0; i < scripts.length; i++) {\n\t\t\tvar s = scripts[i];\n\t\t\tif(s.getAttribute(\"src\") == url || s.getAttribute(\"data-webpack\") == dataWebpackPrefix + key) { script = s; break; }\n\t\t}\n\t}\n\tif(!script) {\n\t\tneedAttach = true;\n\t\tscript = document.createElement('script');\n\n\t\tscript.charset = 'utf-8';\n\t\tscript.timeout = 120;\n\t\tif (__webpack_require__.nc) {\n\t\t\tscript.setAttribute(\"nonce\", __webpack_require__.nc);\n\t\t}\n\t\tscript.setAttribute(\"data-webpack\", dataWebpackPrefix + key);\n\t\tscript.src = url;\n\t}\n\tinProgress[url] = [done];\n\tvar onScriptComplete = function(prev, event) {\n\t\t// avoid mem leaks in IE.\n\t\tscript.onerror = script.onload = null;\n\t\tclearTimeout(timeout);\n\t\tvar doneFns = inProgress[url];\n\t\tdelete inProgress[url];\n\t\tscript.parentNode && script.parentNode.removeChild(script);\n\t\tdoneFns && doneFns.forEach(function(fn) { return fn(event); });\n\t\tif(prev) return prev(event);\n\t}\n\t;\n\tvar timeout = setTimeout(onScriptComplete.bind(null, undefined, { type: 'timeout', target: script }), 120000);\n\tscript.onerror = onScriptComplete.bind(null, script.onerror);\n\tscript.onload = onScriptComplete.bind(null, script.onload);\n\tneedAttach && document.head.appendChild(script);\n};","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","__webpack_require__.p = \"/\";","var createStylesheet = function(chunkId, fullhref, resolve, reject) {\n\tvar linkTag = document.createElement(\"link\");\n\n\tlinkTag.rel = \"stylesheet\";\n\tlinkTag.type = \"text/css\";\n\tvar onLinkComplete = function(event) {\n\t\t// avoid mem leaks.\n\t\tlinkTag.onerror = linkTag.onload = null;\n\t\tif (event.type === 'load') {\n\t\t\tresolve();\n\t\t} else {\n\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\tvar realHref = event && event.target && event.target.href || fullhref;\n\t\t\tvar err = new Error(\"Loading CSS chunk \" + chunkId + \" failed.\\n(\" + realHref + \")\");\n\t\t\terr.code = \"CSS_CHUNK_LOAD_FAILED\";\n\t\t\terr.type = errorType;\n\t\t\terr.request = realHref;\n\t\t\tlinkTag.parentNode.removeChild(linkTag)\n\t\t\treject(err);\n\t\t}\n\t}\n\tlinkTag.onerror = linkTag.onload = onLinkComplete;\n\tlinkTag.href = fullhref;\n\n\tdocument.head.appendChild(linkTag);\n\treturn linkTag;\n};\nvar findStylesheet = function(href, fullhref) {\n\tvar existingLinkTags = document.getElementsByTagName(\"link\");\n\tfor(var i = 0; i < existingLinkTags.length; i++) {\n\t\tvar tag = existingLinkTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\") || tag.getAttribute(\"href\");\n\t\tif(tag.rel === \"stylesheet\" && (dataHref === href || dataHref === fullhref)) return tag;\n\t}\n\tvar existingStyleTags = document.getElementsByTagName(\"style\");\n\tfor(var i = 0; i < existingStyleTags.length; i++) {\n\t\tvar tag = existingStyleTags[i];\n\t\tvar dataHref = tag.getAttribute(\"data-href\");\n\t\tif(dataHref === href || dataHref === fullhref) return tag;\n\t}\n};\nvar loadStylesheet = function(chunkId) {\n\treturn new Promise(function(resolve, reject) {\n\t\tvar href = __webpack_require__.miniCssF(chunkId);\n\t\tvar fullhref = __webpack_require__.p + href;\n\t\tif(findStylesheet(href, fullhref)) return resolve();\n\t\tcreateStylesheet(chunkId, fullhref, resolve, reject);\n\t});\n}\n// object to store loaded CSS chunks\nvar installedCssChunks = {\n\t143: 0\n};\n\n__webpack_require__.f.miniCss = function(chunkId, promises) {\n\tvar cssChunks = {\"69\":1,\"163\":1,\"239\":1,\"602\":1,\"868\":1};\n\tif(installedCssChunks[chunkId]) promises.push(installedCssChunks[chunkId]);\n\telse if(installedCssChunks[chunkId] !== 0 && cssChunks[chunkId]) {\n\t\tpromises.push(installedCssChunks[chunkId] = loadStylesheet(chunkId).then(function() {\n\t\t\tinstalledCssChunks[chunkId] = 0;\n\t\t}, function(e) {\n\t\t\tdelete installedCssChunks[chunkId];\n\t\t\tthrow e;\n\t\t}));\n\t}\n};\n\n// no hmr","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t143: 0\n};\n\n__webpack_require__.f.j = function(chunkId, promises) {\n\t\t// JSONP chunk loading for javascript\n\t\tvar installedChunkData = __webpack_require__.o(installedChunks, chunkId) ? installedChunks[chunkId] : undefined;\n\t\tif(installedChunkData !== 0) { // 0 means \"already installed\".\n\n\t\t\t// a Promise means \"currently loading\".\n\t\t\tif(installedChunkData) {\n\t\t\t\tpromises.push(installedChunkData[2]);\n\t\t\t} else {\n\t\t\t\tif(true) { // all chunks have JS\n\t\t\t\t\t// setup Promise in chunk cache\n\t\t\t\t\tvar promise = new Promise(function(resolve, reject) { installedChunkData = installedChunks[chunkId] = [resolve, reject]; });\n\t\t\t\t\tpromises.push(installedChunkData[2] = promise);\n\n\t\t\t\t\t// start chunk loading\n\t\t\t\t\tvar url = __webpack_require__.p + __webpack_require__.u(chunkId);\n\t\t\t\t\t// create error before stack unwound to get useful stacktrace later\n\t\t\t\t\tvar error = new Error();\n\t\t\t\t\tvar loadingEnded = function(event) {\n\t\t\t\t\t\tif(__webpack_require__.o(installedChunks, chunkId)) {\n\t\t\t\t\t\t\tinstalledChunkData = installedChunks[chunkId];\n\t\t\t\t\t\t\tif(installedChunkData !== 0) installedChunks[chunkId] = undefined;\n\t\t\t\t\t\t\tif(installedChunkData) {\n\t\t\t\t\t\t\t\tvar errorType = event && (event.type === 'load' ? 'missing' : event.type);\n\t\t\t\t\t\t\t\tvar realSrc = event && event.target && event.target.src;\n\t\t\t\t\t\t\t\terror.message = 'Loading chunk ' + chunkId + ' failed.\\n(' + errorType + ': ' + realSrc + ')';\n\t\t\t\t\t\t\t\terror.name = 'ChunkLoadError';\n\t\t\t\t\t\t\t\terror.type = errorType;\n\t\t\t\t\t\t\t\terror.request = realSrc;\n\t\t\t\t\t\t\t\tinstalledChunkData[1](error);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\t\t\t\t\t__webpack_require__.l(url, loadingEnded, \"chunk-\" + chunkId, chunkId);\n\t\t\t\t} else installedChunks[chunkId] = 0;\n\t\t\t}\n\t\t}\n};\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkfrontend\"] = self[\"webpackChunkfrontend\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [998], function() { return __webpack_require__(9322); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["Store","__exports__","routes","path","name","redirect","component","children","router","createRouter","history","createWebHashHistory","beforeEach","to","from","user","getUser","isAdmin","push","createApp","App","use","ElementPlus","mount","calcTimeLineContainerWidth","clientWidth","OTHER_WIDTH","frame2Time","frame","fps","second2hms","second","h","Math","floor","String","m","s","frameWidth2Grid","frameWidth","gridSegmentList","maxWidth","minWidth","gridFrame","groupGridFrame","tempGridSegment","gridSegment","Error","gridWidth","getGridTotalNumber","timeLineWidth","materialMaxFrame","oneScreenGridNumber","emptyScreenGridNumber","materialGridNumber","materialWidth","ceil","gridTotalNumber","getTimeScaleWidth","result","getTimeScalePlaceHolderWidth","offsetLeft","gridBufferFirstIndex","placeholderWidth","getGridBufferNumber","timeLine_width","renderGridBufferList","gridBufferList","timeLineOffsetLeft","gridMultiple","firstIndex","gridBufferNumber","value","length","dValue","i","showNumber","width","splice","grid","error","getMinFrameWidth","maxMaterialFrame","maxMaterialFrameWidth","getMaxFrameWidth","getFitFrameWidth","μs2Frame","μs","round","ms2Frame","ms","frame2ms","getMaterialWidth","timelineIn","timelineOut","getMaxFrameOfMaterial","coreData","currentSectionIndex","visionTrackMaterials","sections","sectionTimeline","visionTrack","audioTrackMaterials","audioTrack","maxtimelineOut","voiceType","getVideoTrackMaterialList","tempList","type","sort","a","b","getflatFrameList","videoFrameWidth","tempFramesList","material","framesNumber","tempFrames","position","file","screenFramesNumber","currentVideoIndex","currentFrameIndex","tempTotalMaterialWidth","flatCurrentFrameIndex","count","j","tempFrame","videoIndex","startFrameIndex","endFrameIndex","flatFrameList","slice","afterSliceFlatCurrentFrameIndex","priority","constructFramesMap","videoFrameBuffer","readFrameTaskStack","taskList","tempMap","Map","flatFrame","key","JSON","stringify","has","blobUrl","get","groupKey","set","frameList","values","readFrameList","forEach","task","framesMap","isVideoIndexAlreadyExist","frames","Symbol","timeLineContainer_width","timescale_width","timescale_placeholder_width","maxFrameOfMaterial","maxFrameWidth","minFrameWidth","fitFrameWidth","currentVideoUrl","readFrameWorker","VIDEO_FRAME_WIDTH","VIDEO_FRAME_HEIGHT","isReadFrameBusy","currentReadFrameVideoIndex","videoFrameList","currentFile","rightCount","errorCount","useProvider","$timeLineContainer_width","ref","$frameWidth","$timeLineOffsetLeft","$currentVideoUrl","$coreData","reactive","systemParam","appType","versionCode","platform","videoMetaData","title","videoWidth","videoHeight","coverUrl","duration","materialTotalSize","appendTailStatus","canvasType","globalSetting","addAutoEffect","videoVolumeGain","subtitleLayoutType","subtiitleFontSize","subtitleFontColor","subtitleBgColor","sectionType","sectionIndex","sectionText","projecttimelineIn","projecttimelineOut","sectionExtData","$currentSectionIndex","$readFrameWorker","Worker","process","$videoFrameList","$currentFile","$isReadFrameBusy","$videoFrameBuffer","$flatFrameList","$currentReadFrameVideoIndex","$gridWidth","$gridFrame","$groupGridFrame","$timeLine_width","$timescale_width","$timescale_placeholder_width","$maxFrameWidth","Mapping","$minFrameWidth","$fitFrameWidth","$maxFrameOfMaterial","$readFrameTaskStack","$rightCount","$errorCount","watchEffect","getGridWidth","getGridFrame","getGroupGridFrame","getTimeLineWidth","$framesMap","computed","ReadFrame","console","log","provide","framWidth","USER","setUser","localStorage","setItem","getItem","parse","removeUser","removeItem","getVideoDuration","videoFile","Promise","resolve","reject","url","URL","createObjectURL","tempAudio","Audio","addEventListener","getVideoHeightWidth","video","document","createElement","preload","src","onloadedmetadata","revokeObjectURL","height","getVideoListDuration","videoFileList","async","totalDuration","addVideoToCoreData","tempVisionTrackMaterials","addVideoOnCurrentSection","videoList","videoInputElement","Api","clearVideoOfCurrentSection","zoomIn","targetFrameWidth","zoomOut","zoomFit","optimizeTaskStack","currentTask","currentTaskHashMap","filter","isFrameInVideoFrameBuffer","isFrameInCurrentTask","excuteReadFrameTask","videoFrameHeight","pop","map","join","WASM","InitFFCodecReq","StartDecodeReq","VideoRGBFrameRsp","OnMessageEvent","StartDecodeEndRsp","InitFFCodecRsp","MediaInfoRsp","StopDecodeRsp","readFrame","worker","outputWidth","outputHeight","callback","postMessage","what","isDebug","fileSize","fileData","disableType","outScaleWidth","outScaleHeight","isAddBlack","outFps","ffthreadCount","outVideoFormat","onmessage","response","data","rgbBuffers","timestamp","size","imageData","ImageData","canvas","OffscreenCanvas","context","getContext","putImageData","convertToBlob","then","blob","startTimeMs","endTimeMs","rangeFrameCounts","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","id","loaded","__webpack_modules__","call","deferred","O","chunkIds","fn","notFulfilled","Infinity","fulfilled","Object","keys","every","r","n","getter","__esModule","d","definition","o","defineProperty","enumerable","f","e","chunkId","all","reduce","promises","u","miniCssF","g","globalThis","this","Function","window","obj","prop","prototype","hasOwnProperty","inProgress","dataWebpackPrefix","l","done","script","needAttach","scripts","getElementsByTagName","getAttribute","charset","timeout","nc","setAttribute","onScriptComplete","prev","event","onerror","onload","clearTimeout","doneFns","parentNode","removeChild","setTimeout","bind","target","head","appendChild","toStringTag","nmd","paths","p","createStylesheet","fullhref","linkTag","rel","onLinkComplete","errorType","realHref","href","err","code","request","findStylesheet","existingLinkTags","tag","dataHref","existingStyleTags","loadStylesheet","installedCssChunks","miniCss","cssChunks","installedChunks","installedChunkData","promise","loadingEnded","realSrc","message","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","runtime","some","chunkLoadingGlobal","self","__webpack_exports__"],"sourceRoot":""}